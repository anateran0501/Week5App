# -*- coding: utf-8 -*-
"""StreamlitApp.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q701-Tb8BlXijAkrJaQLLiGgliOivXyM
"""

pip install streamlit
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

# Generate synthetic data
np.random.seed(42)
num_players = 1000
levels = 10
actions = ['play', 'quit', 'restart', 'level_up', 'get_help']

data = {
    'player_id': np.arange(1, num_players + 1),
    'level_completed': np.random.randint(1, levels + 1, num_players),
    'time_spent': np.random.randint(1, 301, num_players),
    'actions_taken': np.random.choice(actions, num_players),
    'difficulty': np.random.randint(1, 7, num_players),
    'last_level_attempts': np.random.randint(1, 11, num_players),
}

df = pd.DataFrame(data)
df['average_level_time'] = df['time_spent'] / df['level_completed']

# Train a simple model to predict time spent based on level and difficulty
X = df[['level_completed', 'difficulty']]
y = df['time_spent']
model = LinearRegression()
model.fit(X, y)

# Streamlit UI
st.title("Game Player Analytics & Prediction")

# Filters
level = st.selectbox("Filter by Level Completed", [None] + sorted(df['level_completed'].unique()))
action = st.selectbox("Filter by Action Taken", [None] + actions)
difficulty = st.selectbox("Filter by Difficulty", [None] + sorted(df['difficulty'].unique()))

# Apply filters
filtered_df = df.copy()
if level:
    filtered_df = filtered_df[filtered_df["level_completed"] == level]
if action:
    filtered_df = filtered_df[filtered_df["actions_taken"] == action]
if difficulty:
    filtered_df = filtered_df[filtered_df["difficulty"] == difficulty]

st.dataframe(filtered_df)

# User input for prediction
st.header("Predict Time Spent")
user_level = st.number_input("Enter Level Completed", min_value=1, max_value=10, value=5)
user_difficulty = st.number_input("Enter Difficulty Level", min_value=1, max_value=6, value=3)

if st.button("Predict Time Spent"):
    prediction = model.predict([[user_level, user_difficulty]])
    st.write(f"Predicted Time Spent: {prediction[0]:.2f} seconds")
